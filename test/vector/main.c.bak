#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#define MAX 1000 // Maximum number of vertices in one partition

int U, V; // Number of vertices in left and right partitions
int pairU[MAX], pairV[MAX], dist[MAX];
int adj[MAX][MAX];

int bfs() {
    int queue[MAX], front = 0, rear = 0;
    for (int u = 1; u <= U; u++) {
        if (pairU[u] == 0) {
            dist[u] = 0;
            queue[rear++] = u;
        }
        else {
            dist[u] = INT_MAX;
        }
    }
    dist[0] = INT_MAX;
    while (front < rear) {
        int u = queue[front++];
        if (dist[u] < dist[0]) {
            for (int v = 1; v <= V; v++) {
                if (adj[u][v] && dist[pairV[v]] == INT_MAX) {
                    dist[pairV[v]] = dist[u] + 1;
                    queue[rear++] = pairV[v];
                }
            }
        }
    }
    return (dist[0] != INT_MAX);
}

int dfs(int u) {
    if (u != 0) {
        for (int v = 1; v <= V; v++) {
            if (adj[u][v] && dist[pairV[v]] == dist[u] + 1) {
                if (dfs(pairV[v])) {
                    pairV[v] = u;
                    pairU[u] = v;
                    return 1;
                }
            }
        }
        dist[u] = INT_MAX;
        return 0;
    }
    return 1;
}

int hopcroftKarp() {
    memset(pairU, 0, sizeof(pairU));
    memset(pairV, 0, sizeof(pairV));
    int matching = 0;
    while (bfs()) {
        for (int u = 1; u <= U; u++) {
            if (pairU[u] == 0 && dfs(u)) {
                matching++;
            }
        }
    }
    return matching;
}

int main__() {
    U = 5; V = 5; // Example graph with 4 nodes on each side
    memset(adj, 0, sizeof(adj));
    adj[1][1] = adj[1][2] = 1;
    adj[2][1] = 1;
    adj[3][2] = adj[3][3] = 1;
    adj[4][3] = 1;
    adj[4][4] = 0;
    //adj[4][5] = 5;
    adj[5][4] = 1;

    printf("Maximum Matching: %d\n", hopcroftKarp());
    return 0;
}
#include "sp_alg_vector.h"
int main() {
    int* data = 0;
    int count = 0;
    SP_ALGORITHMS_NET_GENERIC_ST* p = 0;
    int a = 75, b = 10, c = 15, i = 0;
    int arr[5] = {1, 2, 3, 4, 5};
    int arr1[5] = {11, 12, 13, 4, 51};
    sp_apl_vector_add(p, int, &a,1, 2);
    sp_apl_vector_add(p, int, &b,1, 2);
    sp_apl_vector_add(p, int, &c,1, 2);
    sp_apl_vector_add(p, int, arr,5, 10);
    sp_apl_vector_add(p, int, arr1,5, 10);
    sp_apl_vector_add(p, int, arr1,5, 10);
    sp_apl_vector_add(p, int, arr1,5, 10);
    sp_apl_vector_add(p, int, arr1,5, 10);
    data = (int*)p->data;
    count = p->pl / sizeof(int);
    for (i = 0; i < count; ++i) {
        spllog(1, "12345678, %d", *( data + i) );
    }
    spllog(0, "\n\n\n");
    sp_apl_vector_rem(p, int, 3, 5);
    count = p->pl / sizeof(int);
    for (i = 0; i < count; ++i) {
        spllog(1, "12345678, %d", *(data + i));
    }
    sp_apl_vector_clear(p);
    count = p->pl / sizeof(int);
    for (i = 0; i < count; ++i) {
        spllog(1, "12345678, %d", *(data + i));
    }
    sp_alg_free(p);
    return 0;
}