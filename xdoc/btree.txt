

B Tree:
https://www.geeksforgeeks.org/c/implementation-of-b-tree-in-c/

B+Tree:
https://www.geeksforgeeks.org/c/implementation-of-b-plus-tree-in-c/
Insert 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 , 11, 12, 13, 14, 15, 16 cho B-tree step by step, t = 2


ƒê√¢y l√† hai kh√°i ni·ªám **c·ªët l√µi** trong c·∫•u tr√∫c **B-Tree** ‚Äì d√πng r·∫•t nhi·ªÅu trong h·ªá th·ªëng c∆° s·ªü d·ªØ li·ªáu, h·ªá ƒëi·ªÅu h√†nh, file system, v.v.

---

## ‚úÖ 1. **B·∫≠c c·ªßa B-Tree (Order / Degree)**

* K√Ω hi·ªáu: `t`
* L√† tham s·ªë x√°c ƒë·ªãnh **kh·∫£ nƒÉng ch·ª©a c·ªßa node**

### üí° B-Tree b·∫≠c `t` c√≥ c√°c ƒë·∫∑c ƒëi·ªÉm:

| Thu·ªôc t√≠nh                      | Gi√° tr·ªã            |
| ------------------------------- | ------------------ |
| S·ªë l∆∞·ª£ng **key t·ªëi thi·ªÉu**/node | `t - 1` (tr·ª´ root) |
| S·ªë l∆∞·ª£ng **key t·ªëi ƒëa**/node    | `2t - 1`           |
| S·ªë l∆∞·ª£ng **con t·ªëi ƒëa**/node    | `2t`               |
| S·ªë l∆∞·ª£ng **con t·ªëi thi·ªÉu**      | `t` (tr·ª´ root)     |

> üëâ **Root** c√≥ th·ªÉ c√≥ √≠t h∆°n `t - 1` key.

---

### üìå V√≠ d·ª•:

* **B-Tree b·∫≠c 2**:

  * M·ªói node c√≥ **1 ‚Üí 3 keys**
  * C√≥ **2 ‚Üí 4 con**

* **B-Tree b·∫≠c 3**:

  * M·ªói node c√≥ **2 ‚Üí 5 keys**
  * C√≥ **3 ‚Üí 6 con**

---

## ‚úÖ 2. **Chi·ªÅu cao c·ªßa B-Tree (Height)**

* L√† s·ªë **c·∫•p (levels)** t·ª´ **g·ªëc (root)** ƒë·∫øn **l√° (leaf)**
* K√Ω hi·ªáu: `h`
* Root ·ªü c·∫•p `0`, l√° ·ªü c·∫•p `h`

---

### üìå T√≠nh ch·∫•t c·ªßa chi·ªÅu cao:

* B-Tree c√†ng nhi·ªÅu **b·∫≠c (`t`)**, th√¨ **chi·ªÅu cao (`h`) c√†ng th·∫•p** ‚Äì gi√∫p tƒÉng t·ªëc t√¨m ki·∫øm
* V√¨ m·ªói node c√≥ th·ªÉ ch·ª©a nhi·ªÅu keys, n√™n **chi·ªÅu cao c·ªßa B-Tree tƒÉng ch·∫≠m h∆°n Binary Tree**

---

### üìå V√≠ d·ª•:

Gi·∫£ s·ª≠ b·∫°n c√≥ 1 tri·ªáu keys:

* N·∫øu d√πng **Binary Search Tree**: chi·ªÅu cao c√≥ th·ªÉ l√™n ƒë·∫øn \~20
* N·∫øu d√πng **B-Tree b·∫≠c 50** (t = 50), chi·ªÅu cao c√≥ th·ªÉ ch·ªâ kho·∫£ng **3‚Äì4 c·∫•p**

---

## ‚úÖ T√≥m t·∫Øt so s√°nh:

| Thu·∫≠t ng·ªØ         | √ù nghƒ©a                                                                               |
| ----------------- | ------------------------------------------------------------------------------------- |
| **B·∫≠c (t)**       | S·ªë l∆∞·ª£ng **t·ªëi thi·ªÉu key/con** m√† node c√≥ th·ªÉ ch·ª©a. C√†ng l·ªõn th√¨ node ch·ª©a c√†ng nhi·ªÅu |
| **Chi·ªÅu cao (h)** | S·ªë c·∫•p t·ª´ root ‚Üí leaf. ·∫¢nh h∆∞·ªüng ƒë·∫øn hi·ªáu nƒÉng t√¨m ki·∫øm (log n theo c∆° s·ªë l·ªõn h∆°n)    |

---

## üöÄ K·∫øt lu·∫≠n:

* **B·∫≠c** l√† thu·ªôc t√≠nh thi·∫øt k·∫ø ‚Üí ·∫£nh h∆∞·ªüng ƒë·∫øn dung l∆∞·ª£ng m·ªói node
* **Chi·ªÅu cao** l√† k·∫øt qu·∫£ th·ª±c t·∫ø ‚Üí ·∫£nh h∆∞·ªüng ƒë·∫øn t·ªëc ƒë·ªô truy c·∫≠p

---

B·∫°n c√≥ mu·ªën m√¨nh gi√∫p **t√≠nh chi·ªÅu cao t·ªëi ƒëa ho·∫∑c t·ªëi thi·ªÉu c·ªßa B-Tree** n·∫øu bi·∫øt s·ªë key v√† b·∫≠c? Ho·∫∑c so s√°nh v·ªõi AVL/Red-Black Tree?
